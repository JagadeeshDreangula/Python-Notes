Dictionaries are used to store data values in key:value pairs.
A dictionary is a collection which is ordered*, changeable and do not allow duplicates of keys.
If we want to represent a group of objects as key-value pairs then we should go for Dictionary.

* Duplicate keys are not allowed but values can be duplicated.
* Insertion order is not preserved.
* Dictionaries are mutable.
* Dictionaries are dynamic.

Examples:-

#Create and print a dictionary:
thisdict =	{"brand": "Ford","model": "Mustang","year": 1964}
print(thisdict)

#Dictionary items are presented in key:value pairs, and can be referred to by using the key name.

#Print the "brand" value of the dictionary:
thisdict =	{"brand": "Ford","model": "Mustang","year": 1964}
print(thisdict["brand"])

#Duplicate values will overwrite existing values:
thisdict = {"brand": "Ford","model": "Mustang","year": 1964,"year": 2020}
print(thisdict)

##Dictionary Length:- To determine how many items a dictionary has, use the len() function
print(len(thisdict))

##Accessing Items :- You can access the items of a dictionary by referring to its key name, inside square brackets:

Example:
car= {"brand": "Ford","model": "Mustang","year": 1964}
x = car["model"]

There is also a method called get() that will give you the same result:

Example:
x = thisdict.get("model")

##Get Keys:- The keys() method will return a list of all the keys in the dictionary.

Example:
thisdict = {"brand": "Ford","model": "Mustang","year": 1964}

x = thisdict.keys()

print(x)


Example:

car = {"brand": "Ford","model": "Mustang","year": 1964}

x = car.keys()

print(x) #before the change

car["color"] = "white"

print(x) #after the change


##Check if Key Exists:

thisdict = {"brand": "Ford","model": "Mustang","year": 1964}
if "model" in thisdict:
  print("Yes, 'model' is one of the keys in the thisdict dictionary")




Change Values: You can change the value of a specific item by referring to its key name:

d={100:"apple",200:"cherry",300:"sapota"}
print(d)
d[400]="jagadeesh"
print(d)
d[100]="Bhaskar"
print(d)

Add values:Adding an item to the dictionary is done by using a new index key and assigning a value to it:

dict={100:"apple",200:"cherry",300:"sapota"}
dict[500]="mango"
print(dict)


The update() method will update the dictionary with the items from a given argument. If the item does not exist, the item will be added.

dict={100:"apple",200:"cherry",300:"sapota"}
dict.update({700:"Kiwi"})
print(dict)

Removing Items:
dict={100:"apple",200:"cherry",300:"sapota"}
dict.pop("200")
print(dict)

The del keyword removes the item with the specified key name:

dict={100:"apple",200:"cherry",300:"sapota"}
del dict[100]
print(dict)

The clear() method empties the dictionary:

dict={100:"apple",200:"cherry",300:"sapota"}
dict.clear()
print(dict)

#You can loop through a dictionary by using a for loop.

thisdict =	{"brand": "Ford","model": "Mustang","year": 1964}
for x in thisdict:
  print(x)


thisdict =	{"brand": "Ford","model": "Mustang","year": 1964}
for x in thisdict:
  print(thisdict[x])


thisdict =	{"brand": "Ford","model": "Mustang","year": 1964}
for x, y in thisdict.items():
    print(x,y)


Copying items:  You cannot copy a dictionary simply by typing dict2 = dict1, because: dict2 will only be a reference to dict1, and changes made in dict1 will automatically also be made in dict2.

                There are ways to make a copy, one way is to use the built-in Dictionary method copy().

thisdict = {"brand": "Ford","model": "Mustang","year": 1964}
mydict = thisdict.copy()
print(mydict)

Another way to make a copy is to use the built-in function dict().

Example:

thisdict = {"brand": "Ford","model": "Mustang","year": 1964}
 mydict=dict(thisdict)
 print(mydict)



Dictionary Methods:

clear()	          Removes all the elements from the dictionary
copy()	          Returns a copy of the dictionary
fromkeys()        Returns a dictionary with the specified keys and value
get()	          Returns the value of the specified key
items()    	      Returns a list containing a tuple for each key value pair
keys()	          Returns a list containing the dictionary's keys
pop()	          Removes the element with the specified key
popitem()	      Removes the last inserted key-value pair
setdefault()	  Returns the value of the specified key. If the key does not exist: insert the key, with the specified value
update()	      Updates the dictionary with the specified key-value pairs
values()	      Returns a list of all the values in the dictionary

