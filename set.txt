                                                    Set
                                          ...........................
* If we want to represent a group of unique values as a single entity then we should go for set.
*Sets are written with curly brackets.
E.g: myset = {"apple", "banana", "cherry"}
     print(myset)
*Set items are unordered,it means that the items in a set do not have a defined order.
*Set items can appear in a different order every time you use them, and cannot be referred to by index or key.
*Duplicates are not allowed in set datatype
s = {"apple", "banana", "cherry", "apple"}
print(s)
*It is also possible to use the set() constructor to make a set.
thisset = set(("apple", "banana", "cherry")) # note the double round-brackets
print(thisset)
######################################################################################################################################
Methods
.........
add() : Add an item to a set, using the add() method
            thisset = {"apple", "banana", "cherry"}
            thisset.add("orange")
            print(thisset)
update():It is used  to add items from another set into the current set.
            s = {"apple", "banana", "cherry"}
            tropical = {"pineapple", "mango", "papaya"}
            s.update(tropical)
remove():To remove an item in a set, use the remove(), or the discard() method.
            thisset = {"apple", "banana", "cherry"}
            thisset.remove("banana")
            print(thisset)
            thisset.discard("apple")
            print(thisset)
pop():You can also use the pop() method to remove an item, but this method will remove the last item.
      Remember that sets are unordered, so you will not know what item that gets removed.
      thisset = {"apple", "banana", "cherry"}
      x = thisset.pop()
      print(x)
      print(thisset)
clear(): It empties the set
        thisset = {"apple", "banana", "cherry"}
        thisset.clear()

del():The del keyword will delete the set completely
      thisset = {"apple", "banana", "cherry"}
      del thisset
      print(thisset)



Join Two Sets : You can use the union() method that returns a new set containing all items from both sets, or the update() method that inserts all the items from one set into another:

      set1 = {"a", "b" , "c"}
      set2 = {1, 2, 3}
      set3 = set1.union(set2)
      print(set3)

  The update() method inserts the items in set2 into set1:

      set1 = {"a", "b" , "c"}
      set2 = {1, 2, 3}

      set1.update(set2)
      print(set1)

  Note: Both union() and update() will exclude any duplicate items.


  The intersection_update() method will keep only the items that are present in both sets.

       x = {"apple", "banana", "cherry"}
       y = {"google", "microsoft", "apple"}

       x.intersection_update(y)
       print(x)

  The intersection() method will return a new set, that only contains the items that are present in both sets.

       Return a set that contains the items that exist in both set x, and set y:

       x = {"apple", "banana", "cherry"}
       y = {"google", "microsoft", "apple"}

       z = x.intersection(y)

       print(z)

  The symmetric_difference_update() method will keep only the elements that are NOT present in both sets.

       x = {"apple", "banana", "cherry"}
       y = {"google", "microsoft", "apple"}

       x.symmetric_difference_update(y)

       print(x)

  The symmetric_difference() method will return a new set, that contains only the elements that are NOT present in both sets.

       x = {"apple", "banana", "cherry"}
       y = {"google", "microsoft", "apple"}

       z = x.symmetric_difference(y)

       print(z)


                                                     Set Methods


       add()	                    Adds an element to the set
       clear()	                    Removes all the elements from the set
       copy()	                    Returns a copy of the set
       difference()             	Returns a set containing the difference between two or more sets
       difference_update()	        Removes the items in this set that are also included in another, specified set
       discard()	                Remove the specified item
       intersection()	            Returns a set, that is the intersection of two other sets
       intersection_update()	    Removes the items in this set that are not present in other, specified set(s)
       isdisjoint()	                Returns whether two sets have a intersection or not
       issubset()                	Returns whether another set contains this set or not
       issuperset()              	Returns whether this set contains another set or not
       pop()	                    Removes an element from the set
       remove()	                    Removes the specified element
       symmetric_difference()	    Returns a set with the symmetric differences of two sets
       symmetric_difference_update() :	inserts the symmetric differences from this set and another
       union()	                    Return a set containing the union of sets
       update()	                    Update the set with the union of this set and others



a=(1,2,3,4,56)
b=(1,2)


